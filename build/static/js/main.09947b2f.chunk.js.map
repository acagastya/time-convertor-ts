{"version":3,"sources":["utils/index.ts","App/comps/ShowSavedZones.tsx","App/comps/SavedTimezones.tsx","App/comps/TimezoneInput.tsx","App/pages/DualConvertor.tsx","App/comps/ErrorAlert.tsx","App/comps/FutureConverted.tsx","App/comps/ShowFuture.tsx","App/comps/SavedFuture.tsx","App/pages/FutureConversion.tsx","App/pages/Help.tsx","App/pages/SimpleConvertor.tsx","App/comps/Footer.tsx","App/comps/Header.tsx","utils/useTime.ts","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["clearTimezones","localStorage","setItem","displayTime","fmtStr","time","timezone","tz","format","friendlyStr","str","replace","getAbbr","moment","zone","abbr","getSavedZones","savedData","getItem","JSON","parse","list","removeTimeZone","savedZones","updatedZones","filter","savedZone","newZonesStr","stringify","saveTimezones","newZones","Array","from","Set","sort","unfriendlyStr","HMMDY","HMSDMY","localTimezone","guess","timezoneList","names","YEAR","Date","getFullYear","YMD","ShowSavedZones","className","map","key","style","cursor","onClick","type","SavedTimezones","length","paddingTop","aria-label","role","TimezoneInput","autofocus","changeValue","clearInput","id","placeholder","TZ","options","React","useState","suggestions","setSuggestions","inputValue","setInputValue","border","borderBottom","setStyle","aria-placeholder","autoComplete","autoFocus","maxLength","name","onBlur","onChange","e","value","target","undefined","recommendations","option","toLowerCase","includes","a","b","onFocus","boxShadow","left","maxHeight","overflowX","scrollbarWidth","position","right","WebkitOverflowScrolling","zIndex","index","arr","DualConvertor","TZ1","TZ2","setTZ1","setTZ2","disabled","ErrorAlert","msg","data-dismiss","aria-hidden","FutureConverted","selectedTime","chosenTime","convertedTime","clone","fromLbl","toLbl","ShowFuture","zones","SavedFuture","FutureConversion","date","setDate","setTime","setSelectedTime","err","setErr","yesterday","today","getDate","getYesterday","onSubmit","preventDefault","selectedDate","isValid","console","warn","unix","yDayMoment","dateStr","timeStr","dateTimeStr","dateTime","indexOf","htmlFor","aria-describedby","max","min","Help","to","process","SimpleConvertor","Footer","bottom","href","rel","Header","data-target","data-toggle","useTime","useEffect","interval","setInterval","clearInterval","App","now","timezone1","setTimezone1","timezone2","setTimezone2","paddingLeft","paddingRight","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09947b2f.chunk.js","sourcesContent":["import moment from 'moment-timezone';\n\nimport { IDisplayTime } from '../utils/interfaces';\n\n/**\n * @description clears the zones in localStorage\n */\nfunction clearTimezones<never>() {\n  localStorage.setItem('zones', '{}')\n}\n\n/**\n * \n * @param fmtStr {string} Formatting string (ex. 'HH:mm:ss MMMM DD, YYYY')\n * @param time {moment.Moment} Time to be formatted\n * @param timezone {string} Timezone to set\n * @returns {string} formatted time\n */\nfunction displayTime({ fmtStr, time, timezone }: IDisplayTime) {\n  return time.tz(timezone).format(fmtStr);\n}\n\n/**\n * @description Convert a string like `foo_bar_baz` to `foo bar baz`\n * @param {string} str \n */\nfunction friendlyStr(str: string): string {\n  return str.replace(/_/g, ' ');\n}\n\n/**\n * \n * @description Obtain the abbreviation of a timezone\n * @param timezone {string} Time zone string\n * @param time {moment.Moment} moment object\n * @returns {string}\n */\nfunction getAbbr({ timezone, time }: { timezone: string, time: moment.Moment }): string {\n  // @ts-ignore -- they most certainly won't be undefined\n  return moment.tz.zone(timezone).abbr(time);\n}\n\n/**\n * @description Fetch list of saved time zones from the localStorage\n * @returns {string[] | []} Array of saved time zones\n */\nfunction getSavedZones<never>(): string[] | [] {\n  // query localStorage to get JSON as string\n  const savedData: string = localStorage.getItem('zones') || '{}';\n  // extract array\n  const savedZones: string[] = JSON.parse(savedData).list || [];\n  return savedZones;\n}\n\n/**\n * @description get yesterday's date as a moment object\n * @ref { https://flaviocopes.com/how-to-get-yesterday-date-javascript/ }\n * @returns {moment.Moment}\n */\nfunction getYesterday<never>(): moment.Moment {\n  const today = new Date()\n  const yesterday = new Date()\n\n  yesterday.setDate(today.getDate() - 1)\n  return moment(yesterday);\n}\n\n/**\n * @description Removes one zone from localStorage\n * @param {string} zone zone to be removed from the localStorage\n */\nfunction removeTimeZone(zone: string = ''): void {\n  // get saved zones\n  const savedZones = getSavedZones();\n  // filter out\n  const updatedZones = savedZones.filter((savedZone) => savedZone !== zone);\n  // stringify JSON\n  const newZonesStr = JSON.stringify({ list: updatedZones });\n  // save to localStorage\n  localStorage.setItem('zones', newZonesStr);\n}\n\n/**\n * \n * @description takes in an array of timezones and updates the localStorage\n * @param timezone {string[]} An array of timezones\n */\nfunction saveTimezones(timezone: string[] | [] = []) {\n  // get saved zones\n  const savedZones = getSavedZones();\n  // new array of sorted time zones\n  const newZones = Array.from(new Set([...savedZones, ...timezone])).sort();\n  // stringify JSON\n  const newZonesStr = JSON.stringify({ list: newZones });\n  // save to localStorage\n  localStorage.setItem('zones', newZonesStr);\n}\n\n/**\n * @description Convert a string like `foo bar baz` to `foo_bar_baz`\n * @param {string} str\n */\nfunction unfriendlyStr(str: string): string {\n  return str.replace(/ /g, '_');\n}\n\nexport {\n  clearTimezones,\n  displayTime,\n  friendlyStr,\n  getAbbr,\n  getSavedZones,\n  getYesterday,\n  removeTimeZone,\n  saveTimezones,\n  unfriendlyStr\n};\n\nconst basePath = process.env.PUBLIC_URL;\nconst DEFAULT_TZ = 'UTC';\nconst HM = 'HH:mm';\nconst HMMDY = 'HH:mm MMMM DD, YYYY';\nconst HMSDMY = 'HH:mm:ss MMMM DD, YYYY';\nconst localTimezone = moment.tz.guess();\nconst MAX_DATE = '2038-01-18';\nconst timezoneList = moment.tz.names().sort();\nconst YEAR = new Date().getFullYear();\nconst YMD = 'YYYY-MM-DD'\n\nexport {\n  basePath,\n  DEFAULT_TZ,\n  HM,\n  HMMDY,\n  HMSDMY,\n  localTimezone,\n  MAX_DATE,\n  timezoneList,\n  YEAR,\n  YMD\n};","import React from 'react';\n\nimport { displayTime, friendlyStr, removeTimeZone } from '../../utils';\n\nimport { HMSDMY } from '../../utils';\n\nimport { IShowSavedTimezones } from '../../utils/interfaces';\n\nfunction ShowSavedZones({\n  savedZones,\n  time,\n}: IShowSavedTimezones): JSX.Element {\n  return (\n    <>\n      <h3 className=\"mt-5 mb-3\">Saved time zones</h3>\n      <ul className=\"list-group\">\n        {savedZones.map((zone) => (\n          <li\n            className=\"list-group-item list-group-item-action\"\n            key={zone}\n            style={{ cursor: 'pointer' }}\n          >\n            <div className=\"row\">\n              <div className=\"col\">\n                <span className=\"h4\">{friendlyStr(zone)}</span>\n                <br />\n                <span>\n                  {displayTime({ fmtStr: HMSDMY, time, timezone: zone })}\n                </span>\n              </div>\n              <div className=\"justify-content-center align-self-center col\">\n                <button\n                  className=\"btn btn-danger float-right\"\n                  onClick={() => removeTimeZone(zone)}\n                  type=\"button\"\n                >\n                  Remove\n                </button>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default ShowSavedZones;\n","import React from 'react';\n\nimport ShowSavedZones from './ShowSavedZones';\n\nimport { getSavedZones } from '../../utils';\n\nimport { IMoment } from '../../utils/interfaces';\n\nfunction SavedTimezones({ time }: IMoment): JSX.Element {\n  const savedZones = getSavedZones();\n  return (\n    <div className=\"saved\">\n      {savedZones.length > 0 ? (\n        <ShowSavedZones savedZones={savedZones} time={time} />\n      ) : (\n        <h5\n          className=\"border-top mt-5 text-center\"\n          style={{ paddingTop: '1rem' }}\n        >\n          You haven't saved any timezones so far.{' '}\n          <span aria-label=\"Saved list is empty.\" role=\"img\">\n            😅\n          </span>\n        </h5>\n      )}\n    </div>\n  );\n}\n\nexport default SavedTimezones;\n","import React from 'react';\n\nimport { friendlyStr, unfriendlyStr } from '../../utils';\n\nimport { timezoneList } from '../../utils';\n\nimport { ITimezoneInput } from '../../utils/interfaces';\n\nfunction TimezoneInput({\n  autofocus = false,\n  changeValue,\n  clearInput,\n  id = '',\n  placeholder = 'Time zone',\n  TZ = 'UTC',\n}: ITimezoneInput): JSX.Element {\n  const options = timezoneList;\n  const [suggestions, setSuggestions] = React.useState<string[] | []>([]);\n  const [inputValue, setInputValue] = React.useState(friendlyStr(TZ));\n  const [style, setStyle] = React.useState<object>({\n    border: 0,\n    borderBottom: '1px solid silver',\n  });\n\n  function handleBlur(): void {\n    setStyle({\n      'border': 0,\n      'borderBottom': '1px solid silver',\n    });\n  }\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const { value } = e.target;\n    if (clearInput) clearInput(undefined);\n    setInputValue(value);\n\n    let recommendations: string[] | [] = [];\n    if (value.length) {\n      recommendations = options.filter((option) =>\n        option.toLowerCase().includes(unfriendlyStr(value).toLowerCase())\n      );\n      if (value.length <= 3)\n        recommendations.sort((a, b) => a.length - b.length);\n    } else {\n      recommendations = [...options];\n    }\n    setSuggestions(recommendations);\n  }\n\n  function handleClick(value: string) {\n    setSuggestions([]);\n    setInputValue(friendlyStr(value));\n    changeValue(unfriendlyStr(value));\n  }\n\n  function handleFocus(): void {\n    setStyle({\n      'border': 'none',\n    });\n  }\n\n  function showLI(str: string, index: number, arr: string[]): JSX.Element {\n    return (\n      <li\n        className=\"list-group-item list-group-item-action\"\n        key={index}\n        onClick={() => handleClick(str)}\n        style={{ cursor: 'pointer' }}\n      >\n        {friendlyStr(str)}\n      </li>\n    );\n  }\n\n  return (\n    <div className=\"h4\">\n      <input\n        aria-placeholder={placeholder}\n        autoComplete=\"false\"\n        autoFocus={autofocus}\n        className=\"w-75\"\n        id={id}\n        maxLength={100}\n        name={id}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        placeholder={placeholder}\n        role=\"searchbox\"\n        style={style}\n        type=\"text\"\n        value={inputValue}\n      />\n      <div\n        className=\"suggestion-list\"\n        style={{\n          boxShadow:\n            suggestions.length > 0\n              ? '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)'\n              : 'none',\n          left: '15px',\n          maxHeight: '50vh',\n          overflowX: 'scroll',\n          scrollbarWidth: 'none',\n          position: 'absolute',\n          right: '15px',\n          WebkitOverflowScrolling: 'touch',\n          zIndex: 2,\n        }}\n      >\n        <div className=\"h6 mb-0\">\n          <ul className=\"list-group\">\n            {\n              // @ts-ignore don't know why ts is complaining about this\n              suggestions.length > 0 ? suggestions.map(showLI) : null\n            }\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimezoneInput;\n","import React from 'react';\n\nimport SavedTimezones from '../comps/SavedTimezones';\nimport TimezoneInput from '../comps/TimezoneInput';\n\nimport {\n  clearTimezones,\n  displayTime,\n  getSavedZones,\n  saveTimezones,\n} from '../../utils';\n\nimport { HMSDMY } from '../../utils';\n\nimport { IDualConvertor } from '../../utils/interfaces';\n\nfunction DualConvertor({\n  time,\n  TZ1,\n  TZ2,\n  setTZ1,\n  setTZ2,\n}: IDualConvertor): JSX.Element {\n  return (\n    <main className=\"container\">\n      <h3 className=\"mb-5 text-center\">\n        Convert <em>current</em> time across time zones.\n      </h3>\n      <div className=\"mb-3 row\" id=\"labels\">\n        <div className=\"col text-right\" id=\"first-time-lbl-box\">\n          <TimezoneInput\n            autofocus={true}\n            changeValue={setTZ1}\n            id=\"first-time-lbl\"\n            placeholder=\"Time zone\"\n            TZ={TZ1}\n          />\n        </div>\n        <div className=\"col\" id=\"second-time-lbl-box\">\n          <TimezoneInput\n            autofocus={false}\n            changeValue={setTZ2}\n            id=\"second-time-lbl\"\n            placeholder=\"Time zone\"\n            TZ={TZ2}\n          />\n        </div>\n      </div>\n      <div className=\"row\" id=\"times\">\n        <div className=\"col text-right\" id=\"first-time-box\">\n          <h4 id=\"first-time\">\n            {displayTime({ fmtStr: HMSDMY, time, timezone: TZ1 })}\n          </h4>\n        </div>\n        <div className=\"col\" id=\"second-time-box\">\n          <h4 id=\"second-time\">\n            {displayTime({ fmtStr: HMSDMY, time, timezone: TZ2 })}\n          </h4>\n        </div>\n      </div>\n      <div className=\"text-right mt-5\">\n        <button\n          className=\"btn btn-success mr-3\"\n          type=\"button\"\n          onClick={() => saveTimezones([TZ1, TZ2])}\n        >\n          Save timezones\n        </button>\n        <button\n          className=\"btn btn-danger\"\n          disabled={getSavedZones().length === 0}\n          type=\"button\"\n          onClick={clearTimezones}\n        >\n          Clear All\n        </button>\n      </div>\n      <SavedTimezones time={time} />\n    </main>\n  );\n}\n\nexport default DualConvertor;\n","import React from 'react';\n\nfunction ErrorAlert({ msg }: { msg: string }) {\n  return (\n    <div\n      className=\"alert alert-dismissible alert-warning fade mt-5 show\"\n      role=\"alert\"\n    >\n      {msg}\n      <button\n        aria-label=\"Close\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        type=\"button\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n\nexport default ErrorAlert;\n","import React from 'react';\nimport moment from 'moment-timezone';\n\nimport { displayTime, friendlyStr, getAbbr } from '../../utils';\n\nimport { HMMDY, HMSDMY } from '../../utils';\n\nimport { IFutureConverted } from '../../utils/interfaces';\n\nfunction FutureConverted({\n  selectedTime,\n  TZ1,\n  TZ2,\n}: IFutureConverted): JSX.Element {\n  const chosenTime = selectedTime;\n  const convertedTime = selectedTime.clone().tz(TZ2);\n  const fromLbl = getAbbr({ timezone: TZ1, time: moment(chosenTime, HMSDMY) });\n  const toLbl = getAbbr({ timezone: TZ2, time: moment(convertedTime, HMSDMY) });\n  return (\n    <div className=\"mt-5\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>{friendlyStr(TZ1)}</h1>\n        </div>\n        <div className=\"col\">\n          <h1>{friendlyStr(TZ2)}</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {displayTime({ fmtStr: HMMDY, time: chosenTime, timezone: TZ1 })} (\n          {fromLbl})\n        </div>\n        <div className=\"col\">\n          {displayTime({ fmtStr: HMMDY, time: convertedTime, timezone: TZ2 })} (\n          {toLbl})\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FutureConverted;\n","import React from 'react';\nimport moment from 'moment-timezone';\n\nimport { displayTime, friendlyStr, removeTimeZone } from '../../utils';\nimport { HMMDY } from '../../utils';\n\nfunction ShowFuture({\n  selectedTime,\n  zones,\n}: {\n  selectedTime: moment.Moment;\n  zones: string[];\n}): JSX.Element {\n  return (\n    <>\n      <h3 className=\"mt-5 mb-3\">In other time zones...</h3>\n      <ul className=\"list-group\">\n        {zones.map((zone) => (\n          <li\n            className=\"list-group-item list-group-item-action\"\n            key={zone}\n            style={{ cursor: 'pointer' }}\n          >\n            <h4>{friendlyStr(zone)}</h4>\n            <span>\n              {displayTime({\n                fmtStr: HMMDY,\n                time: selectedTime,\n                timezone: zone,\n              })}\n            </span>\n            <button\n              className=\"btn btn-danger float-right\"\n              onClick={() => removeTimeZone(zone)}\n              type=\"button\"\n            >\n              Remove\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default ShowFuture;\n","import React from 'react';\n\nimport ShowFuture from './ShowFuture';\n\nimport { getSavedZones } from '../../utils';\n\nfunction SavedFuture({\n  selectedTime,\n}: {\n  selectedTime: moment.Moment | undefined;\n}): JSX.Element {\n  const list = getSavedZones();\n  return (\n    <div className=\"mt-5\">\n      {selectedTime && list.length > 0 ? (\n        <ShowFuture selectedTime={selectedTime} zones={list} />\n      ) : (\n        <h5\n          className=\"border-top mt-5 text-center\"\n          style={{ paddingTop: '1rem' }}\n        >\n          You haven't {selectedTime ? 'saved any timezones' : 'selected a time'}{' '}\n          so far.{' '}\n          <span aria-label=\"Saved list is empty.\" role=\"img\">\n            😅\n          </span>\n        </h5>\n      )}\n    </div>\n  );\n}\n\nexport default SavedFuture;\n","import React from 'react';\nimport moment from 'moment-timezone';\n\nimport ErrorAlert from '../comps/ErrorAlert';\nimport FutureConverted from '../comps/FutureConverted';\nimport SavedFuture from '../comps/SavedFuture';\nimport TimezoneInput from '../comps/TimezoneInput';\n\nimport { displayTime, getYesterday, timezoneList } from '../../utils';\nimport { MAX_DATE, YMD, localTimezone } from '../../utils';\n\nimport { IFutureConversion } from '../../utils/interfaces';\n\nfunction FutureConversion({\n  date,\n  setDate,\n  setTime,\n  setTZ1,\n  setTZ2,\n  time,\n  // now, // aliased because [time, setTime] hook\n  TZ1,\n  TZ2,\n}: IFutureConversion): JSX.Element {\n  const [selectedTime, setSelectedTime] = React.useState<\n    moment.Moment | undefined\n  >(undefined);\n  const [err, setErr] = React.useState<string>('');\n\n  function handleDateChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    setDate(e.target.value);\n    setSelectedTime(undefined);\n  }\n\n  function handleFormSubmit(e: React.FormEvent<HTMLFormElement>): void {\n    e.preventDefault();\n\n    // 0. Reset Error and selected time\n    setErr('');\n    setSelectedTime(undefined);\n    // 1. Validate selected date\n    const selectedDate = moment(date);\n    if (!selectedDate.isValid()) {\n      setErr('Chosen date is not valid.');\n      console.warn(err);\n      return;\n    }\n    // 2. Check limit of selected date\n    // 2.1 MAX allowed\n    const epoch = moment(MAX_DATE, YMD);\n    if (epoch.unix() - selectedDate.unix() < 0) {\n      setErr('Chosen date is outside the maximum permissible limit.');\n      console.warn(err);\n      return;\n    }\n    // 2.2 MIN allowed -- yesterday\n    const yDayMoment = moment(yesterday.format(YMD), YMD);\n    const selectedMoment = moment(selectedDate.format(YMD), YMD);\n    if (selectedMoment.unix() - yDayMoment.unix() < 0) {\n      setErr('Chosen date is in the past.');\n      console.warn(err);\n      return;\n    }\n    // 3. Validate chosen time\n    const dateStr = selectedDate.format(YMD);\n    const timeStr = time;\n    const dateTimeStr = `${dateStr} ${timeStr}`;\n    const dateTime = moment.tz(dateTimeStr, TZ1);\n    if (!dateTime.isValid()) {\n      setErr('Error occurred while parsing time.');\n      console.warn(err);\n      return;\n    }\n    // 4. validate chosen timezone\n    if (timezoneList.indexOf(TZ1) < 0) {\n      setErr('Selected timezone is invalid.');\n      console.warn(err);\n      return;\n    }\n    // 5. validate set timezone\n    if (timezoneList.indexOf(TZ2) < 0) {\n      setErr('Selected timezone to convert is invalid.');\n      console.warn(err);\n      return;\n    }\n    // 6. convert time\n    setSelectedTime(dateTime);\n  }\n\n  function handleTimeChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    setTime(e.target.value);\n    setSelectedTime(undefined);\n  }\n\n  const yesterday = getYesterday();\n\n  return (\n    <div className=\"container\">\n      <form autoComplete=\"false\" onSubmit={handleFormSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"choose-date\">Choose date</label>\n          <input\n            aria-describedby=\"choose-date\"\n            className=\"form-control\"\n            id=\"chosen-date\"\n            max={MAX_DATE}\n            min={displayTime({\n              fmtStr: YMD,\n              time: yesterday,\n              timezone: localTimezone,\n            })}\n            name=\"choose-date\"\n            onChange={handleDateChange}\n            placeholder=\"Enter date\"\n            type=\"date\"\n            value={date}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"choose-time\">Choose time</label>\n          <input\n            aria-describedby=\"choose-time\"\n            className=\"form-control\"\n            id=\"choose-time\"\n            name=\"choose-time\"\n            onChange={handleTimeChange}\n            placeholder=\"Enter time\"\n            type=\"time\"\n            value={time}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"choose-from-timezone\">Set timezone</label>\n          <TimezoneInput\n            autofocus={false}\n            changeValue={setTZ1}\n            clearInput={setSelectedTime}\n            id=\"choose-from-timezone\"\n            placeholder=\"Set timezone\"\n            TZ={TZ1}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"convert-to-timezone\">Convert to timezone</label>\n          <TimezoneInput\n            autofocus={false}\n            changeValue={setTZ2}\n            clearInput={setSelectedTime}\n            id=\"convert-to-timezone\"\n            placeholder=\"Convert to timezone\"\n            TZ={TZ2}\n          />\n        </div>\n        <button className=\"btn btn-success\" type=\"submit\">\n          Convert\n        </button>\n        {err ? <ErrorAlert msg={err} /> : null}\n        {selectedTime !== undefined ? (\n          <FutureConverted selectedTime={selectedTime} TZ1={TZ1} TZ2={TZ2} />\n        ) : null}\n      </form>\n      <SavedFuture selectedTime={selectedTime} />\n    </div>\n  );\n}\n\nexport default FutureConversion;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getAbbr } from '../../utils';\n\nimport { basePath, localTimezone } from '../../utils';\n\nimport { IMoment } from '../../utils/interfaces';\n\nfunction Help({ time }: IMoment): JSX.Element {\n  return (\n    <div className=\"container\">\n      <ol>\n        <li>\n          Use the <Link to={`${basePath}/`}>homepage</Link> to convert your{' '}\n          <span className=\"font-weight-bold\">current time</span> (\n          {getAbbr({ time, timezone: localTimezone })}) to other timezone.\n        </li>\n        <li>\n          Use the <Link to={`${basePath}/future`}>/future</Link> to convert a{' '}\n          <span className=\"font-weight-bold\">future date</span> between\n          different timezones.\n        </li>\n        <li>\n          Use the <Link to={`${basePath}/from-to`}>/from-to</Link> to convert{' '}\n          <span className=\"font-weight-bold\">current time</span> between\n          different timezones.\n        </li>\n        <li>\n          You can <span className=\"font-weight-bold\">save</span> the converted\n          timezones, by clicking the \"Save\" button.\n        </li>\n      </ol>\n    </div>\n  );\n}\n\nexport default Help;\n","import React from 'react';\n\nimport SavedTimezones from '../comps/SavedTimezones';\nimport TimezoneInput from '../comps/TimezoneInput';\n\nimport {\n  clearTimezones,\n  displayTime,\n  friendlyStr,\n  getSavedZones,\n  localTimezone,\n  saveTimezones,\n} from '../../utils';\n\nimport { HMSDMY } from '../../utils';\n\nimport { ISimpleConvertor } from '../../utils/interfaces';\n\nfunction SimpleConvertor({ setTZ1, time, TZ1 }: ISimpleConvertor): JSX.Element {\n  return (\n    <main className=\"container\">\n      <h1 className=\"mb-5 text-center\">\n        Convert <em>current</em> time to other time zone.\n      </h1>\n      <div className=\"mb-3 row\" id=\"labels\">\n        <div\n          className=\"col text-right\"\n          id=\"first-time-lbl-box\"\n          style={{ cursor: 'not-allowed' }}\n        >\n          <div className=\"h4\">{friendlyStr(localTimezone)} (Local time)</div>\n        </div>\n        <div className=\"col\" id=\"second-time-lbl-box\">\n          <TimezoneInput\n            autofocus={true}\n            changeValue={setTZ1}\n            id=\"second-time-lbl\"\n            placeholder=\"Time zone\"\n            TZ={TZ1}\n          />\n        </div>\n      </div>\n      <div className=\"row\" id=\"times\">\n        <div className=\"col text-right\" id=\"first-time-box\">\n          <h4 id=\"first-time\">\n            {displayTime({ fmtStr: HMSDMY, time, timezone: localTimezone })}\n          </h4>\n        </div>\n        <div className=\"col\" id=\"second-time-box\">\n          <h4 id=\"second-time\">\n            {displayTime({ fmtStr: HMSDMY, time, timezone: TZ1 })}\n          </h4>\n        </div>\n      </div>\n      <div className=\"text-right mt-5\">\n        <button\n          className=\"btn btn-success mr-3\"\n          onClick={() => saveTimezones([TZ1])}\n          type=\"button\"\n        >\n          Save timezone\n        </button>\n        <button\n          className=\"btn btn-danger\"\n          disabled={getSavedZones().length === 0}\n          onClick={clearTimezones}\n          type=\"button\"\n        >\n          Clear All\n        </button>\n      </div>\n      <SavedTimezones time={time} />\n    </main>\n  );\n}\n\nexport default SimpleConvertor;\n","import React from 'react';\n\nimport { YEAR } from '../../utils';\n\nfunction Footer<never>(): JSX.Element {\n  return (\n    <footer\n      className=\"border-top mt-5 page-footer\"\n      style={{\n        bottom: 0,\n        paddingTop: '1rem',\n      }}\n    >\n      <div className=\"text-center\">\n        <p>\n          Copyright &copy; {YEAR}{' '}\n          <a\n            href=\"https://en.wikinews.org/wiki/User:Acagastya\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Agastya\n          </a>\n          . This project is licensed under{' '}\n          <a\n            href=\"https://opensource.org/licenses/BSD-3-Clause\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            BSD-3-Clause license\n          </a>\n          . Report bugs{' '}\n          <a\n            href=\"https://github.com/acagastya/time-convertor-ts/issues/new\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            here\n          </a>\n          .\n        </p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { basePath } from '../../utils';\n\nfunction Header<never>(): JSX.Element {\n  return (\n    <nav className=\"bg-danger mb-5 navbar navbar-dark navbar-expand-lg\">\n      <Link className=\"navbar-brand\" to={`${basePath}/`}>\n        <span aria-label=\"time-convertor\" role=\"img\">\n          ⏳\n        </span>{' '}\n        time convertor\n      </Link>\n      <button\n        aria-label=\"Toggle navigation\"\n        className=\"navbar-toggler\"\n        data-target=\"#collapsibleNavbar\"\n        data-toggle=\"collapse\"\n        type=\"button\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={`${basePath}/help`}>\n              Help\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={`${basePath}/future`}>\n              Future\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={`${basePath}/from-to`}>\n              From-to\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { useState, useEffect } from 'react';\nimport moment from 'moment-timezone';\n\n\n/**\n * @description A custom hook which returns the current time as a moment object.\n * @param none\n * @returns {moment.Moment} moment object containing current time.\n */\nfunction useTime<never>(): moment.Moment {\n  const [time, setTime] = useState(moment());\n\n  function updateTime() {\n    setTime(moment());\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => updateTime(), 1000);\n    return () => clearInterval(interval);\n  });\n\n  return time;\n}\n\nexport default useTime;","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport DualConvertor from './pages/DualConvertor';\nimport FutureConversion from './pages/FutureConversion';\nimport Help from './pages/Help';\nimport SimpleConvertor from './pages/SimpleConvertor';\n\nimport Footer from './comps/Footer';\nimport Header from './comps/Header';\n\nimport { displayTime } from '../utils';\nimport { basePath, DEFAULT_TZ, HM, localTimezone, YMD } from '../utils';\nimport useTime from '../utils/useTime';\n\nfunction App<never>(): JSX.Element {\n  const now = useTime();\n  const [timezone1, setTimezone1] = React.useState(DEFAULT_TZ);\n  const [timezone2, setTimezone2] = React.useState(localTimezone);\n  const [date, setDate] = React.useState(\n    displayTime({ fmtStr: YMD, time: now, timezone: localTimezone })\n  );\n  const [time, setTime] = React.useState(\n    displayTime({ fmtStr: HM, time: now, timezone: localTimezone })\n  );\n\n  return (\n    <Router>\n      <div\n        className=\"container-fluid\"\n        style={{ paddingLeft: 0, paddingRight: 0 }}\n      >\n        <Header />\n        <Switch>\n          <Route\n            path={`${basePath}/future`}\n            render={() => (\n              <FutureConversion\n                date={date}\n                setDate={setDate}\n                setTime={setTime}\n                setTZ1={setTimezone1}\n                setTZ2={setTimezone2}\n                time={time}\n                TZ1={timezone1}\n                TZ2={timezone2}\n              />\n            )}\n          />\n          <Route path={`${basePath}/help`} render={() => <Help time={now} />} />\n          <Route\n            path={`${basePath}/from-to`}\n            render={() => (\n              <DualConvertor\n                setTZ1={setTimezone2}\n                setTZ2={setTimezone1}\n                time={now}\n                TZ1={timezone2}\n                TZ2={timezone1}\n              />\n            )}\n          />\n          <Route\n            path={`${basePath}/`}\n            render={() => (\n              <SimpleConvertor\n                setTZ1={setTimezone1}\n                time={now}\n                TZ1={timezone1}\n              />\n            )}\n          />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}